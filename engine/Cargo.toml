[package]
build = "build.rs"
description = "the automatic content/context management engine implementation"
name = "acme-engine"

authors.workspace = true
categories.workspace = true
edition.workspace = true
homepage.workspace = true
keywords.workspace = true
license.workspace = true
readme.workspace = true
repository.workspace = true
rust-version.workspace = true
version.workspace = true

[package.metadata.docs.rs]
all-features = false
features = ["full"]
rustc-args = ["--cfg", "docsrs"]
version = "{{version}}"

[dependencies]
# local
acme-core = { workspace = true }
# custom
scsys = { workspace = true }

# async
tokio = { features = ["sync"], optional = true, workspace = true }
# data & serialization
serde = { features = ["derive"], optional = true, workspace = true }
serde_derive = { optional = true, workspace = true }
serde_json = { optional = true, workspace = true }
# error handling
anyhow = { optional = true, workspace = true }
thiserror = { workspace = true }
# macros
paste = { workspace = true }
smart-default = { workspace = true }
strum = { features = ["derive"], workspace = true }
# random
getrandom = { optional = true, workspace = true }
rand = { optional = true, workspace = true }
rand_distr = { optional = true, workspace = true }
uuid = { optional = true, workspace = true }
# time
chrono = { optional = true, workspace = true }
time = { optional = true, workspace = true }
# tracing
tracing = { optional = true, workspace = true }
# wasm
wasm-bindgen = { optional = true, workspace = true }

[dev-dependencies]
lazy_static = { workspace = true }

[features]
default = [
    "std"
]

full = [
    "default",
    "anyhow",
    "json",
    "serde"
]

# ************* [FF:Features] *************

json = [
    "alloc",
    "acme-core/json",
    "serde",
    "serde_json",
    "scsys/json",
]

nightly = [    
    "acme-core/nightly",
]

# ************* [FF:Environments] *************
std = [
    "alloc",
    "acme-core/std",
    "anyhow?/std",
    "rand?/std",
    "rand?/std_rng",
    "scsys/std",
    "serde?/std",
    "serde_json?/std",
    "strum/std",
    "thiserror/std",
    "time?/std",
    "uuid?/std"
]

wasi = [
    "acme-core/wasi",
    "scsys/wasi",
]

wasm = [
    "acme-core/wasm",
    "chrono?/wasmbind",
    "getrandom?/wasm_js",
    "scsys/wasm",
    "time?/wasm-bindgen",
    "uuid?/js",
    "wasm-bindgen",
]

# ************* [FF:Dependencies] *************
alloc = [
    "acme-core/alloc",
    "scsys/alloc",
    "serde?/alloc",
    "serde_json?/alloc",
    "time?/alloc",
]

anyhow = ["dep:anyhow"]

chrono = [
    "dep:chrono",
    "acme-core/chrono",
    "std",
    "time",
]

rand = [
    "dep:rand",
    "dep:rand_distr",
    "acme-core/rand",
    "rng",
    "time?/rand"
]

rng = [
    "dep:getrandom",
    "acme-core/rng",
    "rand?/small_rng",
    "rand?/thread_rng",
    "uuid?/v4",
]

serde = [
    "dep:serde",
    "dep:serde_derive",
    "acme-core/serde",
    "scsys/serde",
    "time?/serde",
]

serde_json = ["dep:serde_json"]

time = ["dep:time"]


tracing = [
    "dep:tracing",
    "acme-core/tracing",
    "scsys/tracing",
]

uuid = [
    "dep:uuid",
    "acme-core/uuid",
    "rng"
]

wasm-bindgen = ["dep:wasm-bindgen"]

# ************* [Unit Tests] *************
[[test]]
name = "default"