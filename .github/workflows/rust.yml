name: Rust

concurrency:
  cancel-in-progress: false
  group: ${{ github.workflow }}-${{ github.ref }}

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

on:
  pull_request:
    branches:
      - main
      - $default-branch
    types:
      - opened
      - reopened
      - synchronize
  push:
    branches:
      - main
      - $default-branch
    tags:
      - v*.*.*
      - "*-nightly"
  repository_dispatch:
    types: [ rust ]
  workflow_dispatch:
    inputs:
      benchmark:
        default: false
        description: 'Run benchmarks'
        required: true
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [ x86_64-unknown-linux-gnu ]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          target: ${{ matrix.target }}
      -
        name: Build the workspace
        run: cargo build --release --locked --workspace --features full --target ${{ matrix.target }}
  benchmark:
    if: ${{ inputs.benchmark || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.cargo-bench.outputs.digest }}
      id: ${{ steps.cargo-bench.outputs.id }}
      url: ${{ steps.cargo-bench.outputs.url }}
    permissions:
      actions: read
      contents: write
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
          repository: ${{ github.repository }}
      -
        name: Benchmark the workspace
        id: cargo-bench
        uses: peter-evans/repository-dispatch@v3
        with:
          event-type: cargo-bench
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'
          token: ${{ github.token }}
  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        features:  [ full, default ]
        target: [ x86_64-unknown-linux-gnu ]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          target: ${{ matrix.target }}
      -
        name: Test (${{ matrix.features }})
        if: matrix.features != 'default' && matrix.features != 'all'
        run: cargo test -r --locked --workspace --target ${{ matrix.target }} --features ${{ matrix.features }}
      -
        name: Test (default)
        if: matrix.features == 'default'
        run: cargo test -r --locked --workspace --target ${{ matrix.target }}
